version: '3.8'
services:
  # database:
  #   image: mysql:8.4.0
  #   hostname: database
  #   ports:
  #     - '3306:3306'
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./volume/mysql/data:/var/lib/mysql
  #     - ./volume/mysql/logs:/var/log/mysql
  kafka:
    container_name: kafka_micro
    image: 'bitnami/kafka:latest'
    env_file:
      - .env
    ports:
      - '${KAFKA_PORT}:9092'
    volumes:
      - kafka_data:${KAFKA_DATA}
    networks:
      - micro_network
    restart: always
    environment:
      - BITNAMI_DEBUG=true
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=INTERNAL
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,INTERNAL://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://127.0.0.1:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@:9093
      - KAFKA_INTER_BROKER_USER=${KAFKA_USER}
      - KAFKA_INTER_BROKER_PASSWORD=${KAFKA_PASS}
      - KAFKA_CLIENT_USERS=${KAFKA_USER}
      - KAFKA_CLIENT_PASSWORDS=${KAFKA_PASS}
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
  v-users:
    build:
      context: .
      dockerfile: apps/v-user/Dockerfile
    working_dir: /home/node/app/v-user
    env_file:
      - .env
    volumes:
      - ./libs:/home/node/app/libs
      - ./:/home/node/app
    # command: node app.js
    deploy:
      replicas: 1
      restart_policy:
        condition: none
  v-messages:
    build:
      context: .
      dockerfile: apps/v-messages/Dockerfile
    working_dir: /home/node/app/v-messages
    env_file:
      - .env
    volumes:
      - ./libs:/home/node/app/libs
      - ./:/home/node/app
    # command: node app.js
    deploy:
      replicas: 1
      restart_policy:
        condition: none
  v-spam:
    build:
      context: .
      dockerfile: apps/v-spam
    working_dir: /home/node/app/v-spam
    env_file:
      - .env
    volumes:
      - ./:/home/node/app

networks:
  micro_network:
    # driver: bridge

volumes:
  kafka_data: